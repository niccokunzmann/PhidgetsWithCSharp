<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAEAIACoJQAAFgAAACgAAAAwAAAAYAAAAAEAIAAAAAAAgCUAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFB+lQFMd40LSnSGEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABASk4DQUtOCkNP
        UxJCTVEdTV1kKEZYYjRJW2c/S1xqSUVaclZEWndhS2B3bE1ea3ZQX2WBVWRpjFNhZpdOW2CiTVxhrkhZ
        X7hJXWjFTW2A0E59lt1VmLjpVaDD9Valyv5RlbX+UH+U/G2UphlRe4wLVIWbIVeSrS9hn7w5YZy3RGKU
        rU9ehJZYZX+LYmV5fmtoeXx3a3x/gWJzdo1hcXSXYnJ2ollobK9WYme4UV1ixVBdYc9KVFjaSlRY5EVO
        UvBCSk74PkVJ/DlARP40OT3/MDU5/zA1O/4uMjn/KS00/yoxPP4nKTH/Jicu/yQlK/8jJCr+JCw5/yIl
        LP8fHyb+Hx0l/x8eJf8fICn+JTNE/zNoh/88jbf+PJK//z+ZyP9DpM/+PXWQ/36pviljjJ6nQniQ/kqd
        u/5LnsP+S5i7/kiFpP4zSFf+OkdS/k9VWf47PkL+Sk5R/i8wNv4uLzT+Mz1H/i0xOP4eHSP+Hh4l/jU1
        O/4/QEX+RUdM/lZbXf44Oj3+WF9h/lBYXv4yNj7+Jygq/l1hZP5tdXj+e4GC/lppdf4aGiP+GRYg/hcV
        H/4WFR/+Gx8s/hgYIv4YFh/+GBYg/hYWIP4ZGCH+LEti/jh+pP48fKfPR36pUlGHr3lFotH+TK/W/ne9
        1jZjiJucQpq//z2cyv4+jbz6OoWw+zeBqP4yaYr/Sl1o/3qChP49RUz/e4SI/1JYXP8+R0j+ISEl/2Nr
        b/48TVv/ICYv/25zdf4vLTH/Z2xu/4+Ymf5vcnD/lqGk/3SAhP5dZGf/MDE1/zc5Pv5aZWf/anZ5/zg6
        QP4aGCD/FxQd/xcUHv8XFSD+IB0i/yAdIv8fHSH+Hhwf/x4dH/8hICT+MVRv/zd0mP87aZDHRW2PQUiB
        qGpBmsj+TavQ/3W800B+utWCSqrT/0WYxtVNi7UORnyhFDp2m+Q2cpX/TWR0/42Uk/5GSk//ipGR/15l
        aP9PWFv+MzU5/01RVP42Njv/MTM5/ykpLv4yMTb/MjI4/4qQkf47QEj/bnZ7/1ZeY/44Oj//Pj5B/0xQ
        Vf5WYGj/YGx2/zs6QP4UCxT/EwoT/xYQGP8dGiD+IB4i/x0cIP8bGR3+Ghca/xoWGv8aFxv+KDlJ/y9a
        ev8xYYj+LF6G/zR3of9AkLb+S5Sy/3eitUmCu9NmSaXJ/jmPu/ovb5qhLmGGpzRojP02aYn+RFpq/ouV
        lv5FTVf+eoOE/l9lZv5QVlj+LCwv/mFmav5aXWD+TE9S/klLT/6EiYz+ODtC/lBSWP49Qk7+RUpS/jc5
        QP4kKjX+JCMp/iAhKP5HSlH+P0BG/iQfJf4VGCf+EAgR/hQOFf4YFhr+Hhwg/h0dIv4aGR3+FxUZ/hgW
        Gv4YFhv+HBwi/j1RYv5NbX/+Q3CP/jJkhv40Y3/+MkRQ/m+JlVR+prdLQ4ah/zuFqP4zdZn/MGiK/zJi
        gf4uUWz/X2hs/2Jxdf4pNED/OERL/4KLjP9ze3z+R1BY/4KKjf6Ijo//iZKU/0hSX/57gIP/Ul1m/zE4
        Q/49PkX/REVM/0FDSf4xP0z/QkZM/x8fKP4hIiv/Ew8Y/xsiMv4sQFL/LC83/zc4PP9HSk3+Ulpc/1Rg
        Yv9MV1r+RlBU/0dSVf9FUFX+SFdc/0JYZP8jQ2r+M1Jy/1Jygf93kJj+oLCx/6y4uVx2i5QvICgw/ylF
        WP4vUmr/LExi/yU6Sv4bICn/QE5V/2p6gf5QaX7/ZXuI/0ZOUv89RUn+JSQn/xwaHv4kJCn/NUNQ/yQj
        K/4lJiz/g4uO/1BTUv5tdXj/bnR3/3eChv5cZWn/aG5w/0hJS/49PUL/W2Bi/ys/VP4oQlr/KzlI/zlA
        SP8pKi/+bHVz/216ef9ea2v+Wmdo/1lnaP9Zamz+Wmxy/1hxfP8wS2r+OVZ1/3KQm/+Koqn+qbm6/8DL
        zGRpdn0TJiYs/hYWGv4aGh7+KCot/i4vMv43ODr+ODk8/iw1Ov5CV2H+R1he/ic6SP42Nzn+NDc5/j0/
        Qf5DRkn+ISAn/h8eJv4eHyn+h4yO/k5RVf5pb3H+eX+D/kxTWP4nJCj+OTo7/i8tLv4UDBL+GCAt/g8S
        Iv4QHjT+Dg4d/hATIP4wNDr+gYuJ/oKNiv5xfXz+cX9+/nKBgP51hIX+doiM/nSLk/5IYHj+OFFw/oul
        rv6es7n+u8vM/svX12yBjZILY2xv+0ZLTf47QEL/NDk8/ysvM/4kKS3/ISUq/xYZIf4sP0v/L0BK/yo8
        Sf8sNTv+JSgt/x8gJP41ODv/IB4l/x0bI/4lM0L/Zmxv/05XYf5OVV3/Vlxh/0dTW/4sKzD/KScr/ykm
        Kv4dGyL/IjFH/x82Vv4bL0v/HDFO/ylAW/94hoj+p7Ox/6u4tv+ntLT+prW1/6m5u/+uv8H+ssPH/63A
        xv9uhpj+MElk/7HGzP+/0NH+0+Dg/9Xf3nKcqbEyUF5o/zdDTv42R1b/NkdW/zVEUP42QEf/OkVM/zpF
        Tf41QUj/XXJ0/ztGTv9AS1L+OkNH/y40Ov5ITlP/Hhsi/x4bI/4fIi7/JCk0/yAeI/4iJC7/Ki85/0NN
        Vv4uLzb/KSgu/yopMP4fHSX/JDVO/yU/Yf4lQmb/J0Rr/zRWf/+AlKH+qra3/7PAwP+zwcL+tMLE/7TD
        xf+0w8X+tMPF/7DCxv97kqT+OVV7/6O1u/+3xsf+y9jY/9Lb23mcqrM1UmyA/jZcfP46W3r+OVVx/jpU
        bf42TmX+OUlX/k1eav4+SlX+QE5Y/kFOV/5HVFz+Y3N2/khVXP5PWF7+IB4l/h0aIf5HT1b+QU1a/jtH
        VP4tNkH+LzE6/kJKUP4wMTf+LS0z/i0uNP4hICj+JjZM/iZAWP4mQFf+JT9Y/i9Laf6Alqb+na61/rC+
        wf6xv8L+sb/C/rHAwv6xwML+r7/C/q2+wv6BmKz+OVSD/nCAiv5dZWz+b3Z6/rO7vIKaqrQ1Xoik/zVq
        kf5Ea4z/R2qH/0JgfP4/WnP/QFdr/0lbaP5OYG7/Slhj/0pXYf9NWmP+ZHJ3/1BcZP5RWmL/IyEo/yAn
        M/4gISX/IB8k/x4dIf4ZFxz/ISAn/yAkL/4uLzf/Kiow/0NGS/5DRUz/Pk9k/ylGZ/4qR2f/K0pu/zdX
        gf98k6P+maq0/7fEx/+3xMf+uMXH/7jFyP+4xcj+tsTI/7PDx/+HnrD+N1GB/2+Bjv9lb3b+aG5z/7jA
        wYibq7Y2Z5Gq/z1wk/5BYn3/S2mB/0xnfP5IYXX/UGZ2/0tdav5WaHH/d4iM/1Jhaf9gcHn+ZXR9/1dl
        b/5SW2T/IiEp/yImMf4jIij/IyIo/yUkKv4oJy3/Njc8/z5LVP45Pkb/HBgi/0ZITv5AREr/O1Br/0Bn
        kf5BZ4//QmmV/0dwof90h5X+k6Sr/7G+v/+xv8D+sr/A/7LAwf+ywMH+scDC/6+/wv+JobL+NVB//5Sp
        s/+/0NP+ydXX/8XNzY+Xp7E2cY2f/kZshf5UfJn+Wn6a/lx8lf5aeJD+WnSG/mN1gP5rgYr+a4CJ/mBz
        ff5sgoj+a4GG/m+Dh/5qd4H+KCky/h4dJP4sLDD+LSwx/i0sMf4sKzD+NDU5/kdRVf4sLzb+Hhwj/k5X
        X/5IT1b+S1xw/ktwmP5Pc5v+UHem/lJ6rP5ASFL+h5KW/q+7u/6vu7v+r7y6/rC8u/6wvbz+r7y9/qy7
        vP6JoK7+M019/qK3wf7C0dL+0d3d/tri4JiJnKQ2d4yc/3OLm/5wiZr/bYaY/2mClf5nf5P/ZX2T/2V9
        lP5nf5n/aYKd/2+Hn/97kqn+do2o/2uGpf6Elaf/MjU+/yEgJ/42Nz3/NDU7/zM1O/41Njz/QUZK/0dU
        X/5ETlj/ICAq/yIiKv4uMjr/LzZH/1Jwmf5RbZr/Tm6h/090qf9oc3v+oaus/667uv+uu7v+r7y7/6+8
        vP+vvLz+r7y9/6y7vP+No7D+M06B/52yvf++ztD+ztvb/9rj4Z+YqbQlaoSj/2uDoP5of57/a4Kf/2yC
        nv5rgp//aoCe/2uCn/5thaH/a4Kg/3iOp/94jKP+fZOq/3OLp/6Fmq//NjtD/yIhKP4vMTb/JSUs/y8v
        NP4tLTL/MjE2/y4wNv4rND//PUpV/y83QP4uOUf/KjRI/0Ntq/5Gc7T/R3e6/0p+wf+QoK7+s77A/7G9
        vf+wvb3+sb29/7G9vv+xvr7+sb6+/6+9v/+TqLT+NE+C/5Wrt/+4ycv+y9jY/9fg36aOnKcTd4+q/nGI
        o/5qgZ/+boWg/m6EoP5thKD+aYCf/myEof5rgqD+aYGg/nGIo/54jKL+fZKp/niPqP6HnbT+Oj1F/h0b
        I/4kLDf+Jys1/klOUf4pKzH+LC0y/iYoLv4/SE3+Ulxh/kRHTf4lJzD+O0ZW/jpim/47Xpn+QGan/jlm
        qf6So7P+tcHF/q66vP6tubv+rbq7/q66vP6uur3+rbq9/qu5vf6TqLT+M01+/omdrf6Yp6v+tsHD/tXe
        366HlJ4FfJOu+nGIo/5pgqH/aoKh/22DoP5uhaH/aoKg/2qBoP5qgqH/bISh/3CGov+BlKn+fpOq/3mP
        qf6KoLf/TVFX/0FESv5FSlL/PkJJ/zQ1Ov4hHiL/Ix8k/yQiJv5JS07/XmZt/214gP4nLzv/QUlW/0Bo
        nf48X5T/QWym/z1qqf+QpLf+ucfM/7bGy/+3xsz+uMbM/7jHzP+3x8z+t8bL/7TFy/+es8D+NVCB/3SI
        nP9WXmf+laCl/9bg4bUAAAAAhpy17W+Go/5shaP/a4Oj/2yDof5thKH/a4Kg/22DoP5thaH/boSh/3CH
        ov9+kaf+e5Gp/3mQqf6Hnrf/S09Y/zI0PP42O0X/NDpC/y0pLf5QS0r/aGNd/25rZf5XVVX/dXt8/4KJ
        i/4iISn/SE9a/0hplv5GZJH/Q2KL/0xrlv+JmKT+usXG/7nIy/+7ycz+usjL/7zKzP+6ycv+vMrM/7nI
        y/+kt8D+N1KC/42itP+erLH+z9vb/9bf37sAAAAAi6G422+Eof5vhqP/boaj/22Eof5vhaH/bIOg/2yC
        oP5pgZ//a4Kg/2uCn/94jKL+e5Gp/3iPqf5/l7L/QUNL/yQfJf4oJCj/KSYq/y4tMf5VUk//aWVg/2Zi
        Xv5BPT7/SEpN/2Roav4oJi7/UVZd/211fP6IjpL/d36C/2p0f/9faHH+gISF/8DIxf+4wb7+uMLA/7rE
        w/+2wsL+uMPD/6e7wv+Pr8D+XIOq/4quxf+qydX+tNHa/73T2bYAAAAAk6i9yGqBn/5sg6D+aYCg/muC
        oP5tg6D+bYOf/mqAnf5pgZ7+bISg/myEoP5zh57+fJKq/nySqv50jqv+V1th/i4uM/4xLzT+NjU4/j1B
        R/5JS1D+U1dc/mVrcP5fZmz+ZGpv/pCanv43OD7+XmNn/nd/g/5pbnH+hpCV/k1WXv5RU1f+bXV6/jQ3
        Pv5pc3n+c4eR/ltkbP5eZnD+dHyB/kJ1k/5PpMv+UazX/k6v2/5TtN7+U6zQ/mGJnJsAAAAAnLHEtmh+
        nv5sgZ7/aX+e/2uBn/5sgp7/aoGd/22Env5qgp//a4Og/2+Hov93i6D+eI+o/3WMp/5rh6f/ZWpx/zk7
        P/45OD3/PDo9/1dcYf5WXWT/UVlk/4OPlf5teID/Mz1O/257g/5TYWz/Ulhe/4ePlP5qb3L/fIaN/ztK
        WP5FTFb7ho2S92dve/CMk5jkgIqP24GMl9BwfovGcn2Eu1FeabFjlKynfb7bnHm+3pJ/v9yHXH+RfWFv
        e0UAAAAArb/PjXaOq/p2jaj/d5Sy/3OWtf54mrf/eJKq/3eJnf56jKD9gpKm9JGktuqPn6/fjZ2u1YaX
        p8uElaPAbXeDtnaAiayAipOge4aPl3R/h4yGlKKCkJ+vd5WhqG2Wpa1ji5utWKGstU6LkplDfoSLOpec
        oS2WmqAliI2SGX6DihBtcngJdnp+AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAKm0viusuMI+xtvoM8LZ5irB090esb/IFJqgpQqWm6ABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////8AAP///////wAA////////
        AAD///////8AAP///////wAA////////AAD///////8AAP///////wAA////////AAD///////8AAP//
        /////wAA///////xAAD///gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAgAAAAAAA
        AACAAAAAAAAAAIAAAAAAAAAAgAAAAB//AADAP/////8AAP///////wAA////////AAD///////8AAP//
        /////wAA////////AAD///////8AAP///////wAA////////AAD///////8AAP///////wAA////////
        AAA=
</value>
  </data>
</root>