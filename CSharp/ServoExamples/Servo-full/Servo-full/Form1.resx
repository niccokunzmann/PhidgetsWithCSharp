<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAEAIACoJQAAFgAAACgAAAAwAAAAYAAAAAEAIAAAAAAAgCUAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2m6kFf6a1Fo6yviurytQzAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABgaWwFb3l8FXmFiSmDj5Q/i5edU46boGmImZ9+iJ2mlImotKqNtMPBl8XX1ZTK3umWzuL5h8LX/meO
        nv+KprD0n6+1AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABeaGwBa3V5EnmDiCeBjo08aYJfWXSJb22Ompp9hZGTk4OO
        kaiEj5G9eYSH0nR+gedtdnn5ZW5w/2Foa/9hZmj+V1pd/1dYWf9OTlD+TlRa/0NGTf9Hd4r+ZLjQ/2m/
        2f9rwt3+bcfh/2Wyyf9th5P+rr7GDQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgeYMDX3WAE2t8
        hieBj5Y8iJWaUYeVmWaNmZ18kZ2gkYaUmKaBjpK7go6S0XaDh+Zsd3v6aXN3/mNqbf5cYWL+V11T/mhq
        af5fX2D+REJD/kI/QP4/Ojz+PDc5/kpFR/5TT0/+eXd1/l9cXf5mZGT+ioiI/nh3d/40Mzb+Oz1E/jla
        a/5SqcL+Vq7R/Vmw0pRft9huaMLgz3XL5f6Lyt7+xNvlIwAAAAClx9NxoMjWjZzL3KKYytu4ksTWzoSx
        weV7maT3b4SM/mNwdv5haW3/XmJl/1VYWv9NTk/+RkZI/0E/QP5DP0H/SEVF/09LTP5taWn/ZWJj/25r
        bP42NDf/eXh5/52dnP6qqqn/NTM3/2BeYP5sbG7/cG9w/5eWlv6lpaT/k5OT/5KTk/9paGr+gYCB/21t
        cP9LS07+MC80/z5yhv9No73+RpvYuwAAAAAAAAAAVrLcTWnE4/+L0OX+y+XvOwAAAAB3kZ3kX5uu/nDF
        3P5qwdn+YrrR/lClu/43Xm3+PUdU/jo5Pv5gX2D+WVZY/lJQU/6GhYT+c3N0/jMwM/6QkI/+hIWE/peX
        lv6Jiov+wcLA/pCQkf40NDn+dHR1/oWFhf6ur63+NTU6/klJTf5RUVX+MzM3/k9QU/5NTFD+NDQ5/kZG
        Sv5QT1L+NjY6/nR0df5GRkn+MTA0/j1md/5ElrD+QZfS/j+RrbY5lLCcRqfP7Ga81v5ur8P+wNTcTgAA
        AACJtsXDcMrh/2XD3v5btdHKU6a+xVKnvP1Mprv/LlFd/y8uMP6rq6f/dXZ2/1hXWP+Ki4r+X19f/ygo
        Kv5eX1//cXFx/3Bxc/5jY2X/RUVK/01MUP5WVVj/VlVZ/6SkpP54eHr/NDM3/1pZXP5hYWT/j4+Q/3Z2
        ef4wMDT/VFNW/6usq/90dXf+TEtP/25vcv+BgoP+Li80/zc+Rf89e5P+QI+o/0uZsP9On7b+Uqe+/1Ol
        u/9HXWb+sbzCYwAAAACp3OugdMzj/2K+2aUAAAAAAAAAAFKZrodRpbn/OHuO/yMlKP46Ojv/MTI0/zAy
        Nf9hYmL+TlBR/3Jzcv59fn3/jIyL/7O0s/62t7X/fHx9/2JiZv6ioqH/oqKh/8TFwv6en5//aGhr/2lq
        bP5jY2f/dXV4/11eYf4yMjf/R0dL/4OEhv9BQ0f+UlFV/6iopv93d3n+Ly80/y8wNP84PEH+OVxs/z1z
        h/9Aeo7+P219/0RUXf9DR07+oqiseQAAAAC03uqAdMjd/lW2zO9For51RJSubFedseVFm6/+M3OG/iIk
        J/6Ympf+hoeF/ouNjP6BgoH+XF5f/nN0c/6TlZP+dHR0/mlrbP5ydHb+VVZa/k1OUv58fX/+XV5h/jc1
        Ov40Mzf+NDI2/jQyNv4zMjb+cnN0/qChov6AhYn+T1NY/lJUWf5SVVr+dHl//sPLzf6Rk5P+W1xf/iot
        Mv4rLDL+MTA0/jUzNv43NDb+NDM2/jM2Pf45PET+l52hiwAAAAC72eJdbrvM/1SzyP5Fpr3/RJ2z/0KX
        rf45iZ//JkJO/x8gI/5ub27/XWBg/z5BQ/8gISP+HR8h/yEhI/4nJyj/JSUn/zU2O/4rLTP/LC0z/y0t
        M/4wMDX/MTA1/y4uM/4tLTP/Ky0z/yosMv4sLjT/a2xw/7vDyP7Q2Nv/S0tP/5KRj/9pamv+cHR5/9bh
        5f+Tlpf+fH6A/yotM/8pKzL+KSsy/ykrMv8oKzH+KSwy/yosMv8xMzn+jZKWpwAAAAC7y9E5PmFq/zyJ
        mf48k6j/N4mf/zBxhv4mP0v/HSAi/xkcHv4ZHB//Hysz/yMyO/8ZHB/+Gx0f/x8fIv4fHyD/JCUn/zM1
        Ov4qLDL/Li80/zIxNf4vLzP/LS40/z8+Q/5TVFn/bGtu/3Rzdf5cXGD/eHl8/6uxs/7Gzc//XV5j/19f
        Yv9RUVX+X2Jm/3uDh/9gZmn+Iyox/yMnLP8jJyv+IiYq/yMnK/8jJir+ISYp/yIoLP8wMjj+fYGFuAAA
        AACkrbAXRkxR/iAjJf4hKS3+Iyku/iQlJ/4hISL+HR4g/iEiJP4rPEr+S2Z4/mCAkv48UWL+TE1O/kpL
        Tf5JSkz+Z2pr/kJGSv4tLzX+KSsy/n5/gf44O0P+LjA4/istNf5VW2H+WmFn/llfZf4zOD/+U1hd/paV
        k/4vMTj+NjY7/kdHSv5JSkz+T1RW/kZNUv5OVlv+XWds/k1RVf5PVFf+TlFW/k9SV/5UWV3+Iicv/iIp
        MP42RVD+dnt/0AAAAACQlpgBgoiL8lRWV/5MT1D/Sk1O/0dLTP5ITE3/T1RW/0hOUf4kNEH/b4WS/4CW
        o/9dcoH+LTM6/zA1Of4sMDT/Ki4y/0VITP5XW2D/MjQ6/0tMT/5HS1H/b3B1/zIyOf5HSU3/RERI/zg4
        PP4sLTH/T1BS/1FQVP47PEL/WVtg/2ZveP8yPUr+R1Ne/36fr/94lqf+f5+v/yIxP/8jNkX+Kj1M/zZL
        Wv9dc4D+VWx7/2eAj/+Dmqn+c3h+5QAAAACcpKgGd4GI8DI6P/4vNTn/MTc8/zM5Pf4wNTj/KS8y/yUs
        MP4mMTr/U2V1/4GNl/80QEv+KDA4/zhASP4eIib/KCww/01OUv6fqa7/Jy01/yAhJ/42OD3/nqCg/z0+
        Rf5APkD/Tk9T/1RYXv5UV1z/UlNW/1hXWv54d3n/SEhO/1Vibv8wOUH+QExV/5Gxw/+NqLr+nLzN/32V
        of9/kpv+e42Z/4OUn/+RnaT+k52k/5iiqv/P4ej+c3qB9pKXmQGiqq8YiZii/iEvOP4gRFb+I1dw/iJU
        bf4dQVX+GScx/hkgJv4eJCn+RlFY/lpjaf4tMzf+Mjc9/kpSWP5JU1v+WGJp/khMUf6Chor+aG50/k5R
        Vf5kZGf+W1xh/i8yOv5BQUX+UlZc/lNYXv5JSEz+QD9C/kdHTP58fH3+d3l6/l1mb/6Fj5n+i5af/py+
        0v6Ztsv+qsrd/rPCy/62xc7+sMLM/rnL1f66y9T+u83W/r/T3P7O5O7+dn+G/JuipAuqsrgho7bB/z6C
        mv4zk7H/Noyr/zaEo/4xfZz/LGyM/yVCVv4xOkH/fomN/4WRlf9zfoT+XWpx/4KMk/52gYj/c36F/1pb
        Xv5zdnn/fIaN/zY7Rf6Ym57/cHqG/yYqNf5WV1z/UFBW/09SWP5cX2P/Z2tv/0FDSf6IiYn/cHJ1/09a
        ZP86R1P+RUxU/8ri7v/R5/L+2e/5/7HL1v+txtD+orzI/6/G0f+zx8/+tMXN/7bGzv/M3+j+fIWL/621
        tyG5wccntMfT/2Oqwf5NoLr/dKW7/3Sgtf5akKf/RYWe/zhxjf46TVv/bnyG/4KSnP9TW2H+ZXJ5/296
        gv5bY2j/bHV8/2lwdf51d3r/fYOI/3t/iP6KjI7/T1FV/2psb/6Fhon/g4WI/3V5fv4nKzX/hIiN/2lo
        a/50dXf/dHZ5/11rdv+Ajpr+c36M/8Hg7//W7fj+2fH8/7fL1/+twM3+rMDO/7XI1P+/z9n+wNDZ/7nK
        0/+uwcn+V11k/6+2uDi5wsguusrU/nquw/5amrH+baG3/nejt/5dlq3+U5Cn/lOBmP5MXWv+b3uF/n6J
        kf5ianL+fouT/o2aov6BjJX+go2W/n+Jjv6ChYf+jpKU/qOnqP6SmqD+ZGRm/pOYmv6Gh4n+iIiK/nR3
        e/5scXv+homM/n9/f/5qbG/+Z2pt/mh7i/5bdYb+ND5L/s/m8P7V7Pf+1/D7/q/Dyv6aq7H+laSr/pqo
        r/6erLL+dIKN/nyKlf53gov+Mjc+/qGprEq6w8k5sb7J/5Guvf6Hs8T/jrPD/5Kvvv6TrLn/mq24/6Gt
        tf6qr7X/tLe9/7W4v/+vtb3+oam2/5qir/6epbL/srrF/4CNlv4nKzP/Y2hv/3p/hP5YXWP/SlBY/2dt
        dP5vd3//X2Zt/ztCSv4+SFH/VmBq/1Zgaf4aHyb/ISYw/01PVP+Gkpv+ho6Y/63M3f/X7vj+1+/6/6u+
        yf99iJX+dX2H/2txe/9dZG7+WF1l/01SWv84PUb+LjQ7/5Kan1u8xc0zrbO8/q+yuv6xs7v/tLa+/7i6
        wv63usP/tLfC/7C1wf6ss8D/qrG//6mxv/+rtML+kqO6/4ydtv6Pnrf/qLPD/5Wjrf4cISr/O0dR/y85
        RP4ZHyn/ICo1/ygzP/4nMT7/ISk0/xUaJf4rND//OUJN/0FLVP4sMDX/HiMt/yAlL/8qMTr+MzlF/7fL
        1f/W7ff+2/D7/4CPmP8oLDX+Jioz/ycrNP8mKjP+Jioz/yUrNP8qMTv+N0BL/4eRmHOjrLUBoq7A66iv
        vv6rssD+qrG//quywP6rssD+q7LA/qmwv/6psb/+q7LB/qiwv/6nr7/+mam+/o2et/6Pn7j+nKi7/qq3
        v/4rMDn+RlBZ/jA1Pf4hJi7+MzpB/jc8Q/4wNTv+ISQq/hwfJf4jJyz+ISQp/iEkKP4yNTr+HSMt/h8l
        Lv4hJjD+JCkz/oimtv7R6/b+1u76/o2dpv4mKjP+JSoz/ikyPP47YXP+RYCV/kaCmf5BbID+O0ZT/nyL
        lIcAAAAAorHDzqSuvv6qssD/qbG//6mxv/6pscD/q7LA/6qywP6osMD/p7DA/6iwwP+osMD+mae6/4+g
        uP6Sorn/lqS6/625wv4vNj//JCcr/yoqLf4uLS//MzE0/zY1N/49Oz3/QEBC/0NBQv5JR0j/UlNV/1FN
        T/5JSUz/HCMt/x8kLv8hJjD+Iygy/1pkbf94hI3+bHiB/0pSWv8kKjP+KjlF/0uUrP9Xrsf+X7PN/2G5
        1f9kwd3+YKvE/3GLmZoAAAAAprTGo6Otvv6osMD/pq+//6mxwP6osMD/qbHA/6iwwP6nsMD/qLHA/6av
        v/+pscD+oa6//5CguP6Robj/laS6/7nEzf4oLzn/QkBB/1BSU/5OTE//U1VY/05QU/5OTlH/TExP/01O
        Uf5WWl//UVJV/1lbXv5KSkz/HSMt/x4kLv8hJi/+NT5I/z5MWf8kKjT+Iykz/yMpMv8iKjP+PHeM/1et
        xf9lssrPbrLMPXC61j9wyOXWd9Dq/5nR47IAAAAArbvLhJ6qvf6nscD/pK+//6avv/6msMD/pq+//6av
        v/6mr7//qbHA/6avv/+mr7/+oq++/4+guf6On7j/k6K5/7S/y/42Pkr/Pj0//0dDQ/5KR0j/UVNW/1FV
        WP5JSEr/UFFU/01OUP5FQkP/TUxN/0pHSP5QTk//HiQu/yAmMP8gJjD+S11s/197jf8lKTL+JCky/yIo
        Mv8lLDX+RY2k/1yxyv9ps86mZ7LQCGe72xhxyebNd9Hq/5rY6sUAAAAAsb/OUpinvP6kr7/+pK6//qSu
        v/6jrr7+pK6//qavwP6nsMD+prDA/qOuv/6mr8D+oq69/o+guP6On7j+kKC4/q66yP4uNT/+PDw//ktF
        RP5KRET+SkND/kdDQ/5SU1b+TU1P/lBQU/5GQEH+RUBB/kVBQv5TT0/+Iicw/iAmL/4hJjD+Jyoy/iks
        M/4lKTP+Iykx/iMoMv4kKzT+PHWI/lmyyv5kvNf+Xr7e+2HF5P1vzen+dM3l/nShsdoAAAAAsr/NJ5am
        vP6jrr//pK+//6Ouv/6jrr//pK+//6Ktv/6kr7//oq6//6Ktv/+hrL7+pK+//5Giuf6QoLj/jp+4/7TA
        zv40O0b/Ojo+/05HRv5NRkb/S0VF/1lbXv5ZW17/V1hc/1BQUv5HQUL/RkFB/0dCQv5RTE3/lJST/0BE
        S/8kKTP+JSkz/yctOP8pLTb+JSs0/yUqM/8sNkH+PE5d/1KWqv9xxNv+ec3m/3/S6v+A0Ob+Voyc/lpq
        dOEAAAAAk5+qBJmpv/ahrb//oa2//6Ctvv6grL7/oKy+/6Csvv6hrb//oq2//6Gsv/+grL/+prLD/5Ki
        uP6PoLj/kqG4/6y4yP5GT1r/OjtB/05IR/5PSEf/TUdH/01ISP5UU1X/WFhb/1JQU/5KSEz/SEhL/01M
        UP5PT1P/MDM7/yovOP8sMTr+LjQ9/0pXaP06P0jtO0BJ1zxBS8JARE+tSE5bmEhSX4FymqppmtHjT6DX
        6TuSu8spZnqFFVZgaQUAAAAAAAAAAJuswd2eq77+oKy//p+svv6hrb/+oKy//qCtv/6grL/+oK2//qCt
        wP6lssP+prPD/pWhsP6KlaX+go2c/n2Fkf42PEX+MTU9/kxNU/5JTFP+REdO/kRHUPpHSVLrRUZO1kVH
        T8JGSFGtRkhSl0lLVYJKTlhtTFBaV09SXUJYXGYtVVpjGFJVXgQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKGxxYuaqbvhm7TF/53A0/6cxtn/nMnc/5bF
        2P5rgY//ZW58/ldeavlKUVvoQUZR00JFUL5DR1KpRUpUk0hMV35KTVhqTlJdVlRXYkBYW2UsWl1nF1NW
        XwYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2h5RBVW17joS5
        y3mc2u1dn9jrSH6ouTpdangoV1tmFFVYYgQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////8AAP///////wAA////////
        AAD///////8AAP///////wAA////////AAD///////8AAP///////wAA////////AAD//////8MAAP//
        //wAAQAA///AAAABAAD8AAAAAAEAAAAAAAAAYQAAAAAAAAABAAAAAAAAAAEAABgAAAAAAQAAAAAAAAAB
        AAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAA
        AACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAADAAAAAD/8AAMAAAP///wAA4A//////AAD///////8AAP//
        /////wAA////////AAD///////8AAP///////wAA////////AAD///////8AAP///////wAA////////
        AAA=
</value>
  </data>
</root>